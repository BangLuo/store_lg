day08 
电商管理后台 API 接口文档
https://shop-api.circle.ink/
Vue.js 入门教程
https://vuejs.circle.ink/

一、添加商品分类
     1、 点击按钮 弹出dialog
     2、布局所需表单控件
     3、Cascader 级联选择器 
     ---TODO 如何成功添加顶级分类
         
 	---配置：selectedOptions2 要选择的节点
                              Options  1.2级数据
	---发送请求：传入type=2
	--- 配置props 更改显示的value 和 label
                      value->cat_id 
	      label->cat_name
          	      children 
	     ..
	---将数据赋值给Options 数据得以显示
 cat_pid: this.selectedOptions2[this.selectedOptions2.length - 1],
 cat_level: this.selectedOptions2.length

	---选择2级分类后 加入选择即改变 change-on-select   selectedOptions2 的数组出现一、二级cat_id
	传送参数只需要二级id即可 
	（es6对象展开）
	--- 发送请求 传送id
	--- 返回状态码  清空表单 （表单验证中的api）
	---可继续优化 只添加1级数据
二、删除商品分类
     1.注册点击事件，传入参数为scpoe.row	
     2. 发送删除请求请求， 携带分类id  （可以删除一二三级id）   
     3.根据状态码判断 然后提示框
三、编辑商品分类
     第一步：显示商品分类 对话框， 原数据cat_name也显示
	原数据存储在scope.row中
     第二步：处理编辑逻辑
	与添加几乎一样
四、es6 ...语法解释
五、商品列表
     第一步： 打通商品路由
     第二步： 发送请求，获取商品列表 （时间格式化）
     第三步： 注册添加组件add.vue
                  在商品列表添加按钮上编程式导航至add.vue
			添加组件、
	step组件 标签组件 form 表单组件 
	抽取级联组件--- (prop验证)
	父子组件通信：(深入了解组件) 
	①如何在父组件应用子组件的值： events up 
	②父传子props down
    第四步：处理添加功能 awesome vue.js-->丰富的vue学习资源和各种包
	富文本编辑器（vue-quil-editor） --yarn类似于npm
----------------------------------------------------------------------------
day09 
一、上传图片组件
     <!--
        上传组件---封装的比较完整
        ---此组件并未使用axios 所以提供了了一个headers 来支持设置请求头
        action 用来指定图片上传的地址  用axios的基准路径在这里无效 请填写完整路径
        on-preview：预览时触发
        on-remove： 删除时触发
        file-list： 存储上传的图片数组 {name: xxx, url：xxx}
    -->
    删除事件： 
        数组的findindex 方法来遍历数组
        splice 
tips: 补充顶级分类
二、添加省市区级联
    ---cascader 组件
    ---element-china-area-data 安装 使用 
    ---百度地图开放平台 jsapi 调用
        1.地图容器要设置宽高
        2.map必须设置在dom出现后 所以选择声明周期也分清
        3.如何在全局设置map ---?
        4.语法警告bmap
        ---解决方法：
                      对于非window默认成员，使用的时候加上window前缀 
                      const { bamp } = window
三、数据报表
    如何在项目使用echarts
    
四、nprogress 加载进度条
五、项目打包
  ---package.json中build -->npm run build 多出dist目录
    但仍有较大的js文件 
    一个是自己写的app.js文件--2M
    问题：首次加载缓慢 好处：后续快
    解决方案-->路由懒加载
    把js文件分散打包 --执行到哪里，就加载该组件对应的js (看情况第一次加载慢的成都)
    当打包构建应用时，Javascript 包会变得非常大，影响页面加载。
    如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对
    应组件，这样就更加高效了。
    const Login = () => Promise.resolve('@/views/Login');
const Home = () => Promise.resolve('@/views/Home');
const Users = () => Promise.resolve('@/views/users/Users');
const Rights = () => Promise.resolve('@/views/roles/Rights');
const Roles = () => Promise.resolve('@/views/roles/Roles');
const Categories = () => Promise.resolve('@/views/goods/Categories');
const GoodsList = () => Promise.resolve('@/views/goods/GoodsList');
const GoodsAdd = () => Promise.resolve('@/views/goods/Add');
const OrderList = () => Promise.resolve('@/views/orders/List');
const Reports = () => Promise.resolve('@/views/reports/Reports');
    另外的是第三方包的js
    cdn---bootcdn
   
